import io.shiftleft.securityprofile.passes.languagespecific.javascript.generic._
import java.util.concurrent._

@main def main(): Unit = {
  val threadPool = Executors.newFixedThreadPool(1);
  try {
    new CryptoAesWithEcb(cpg, threadPool).createAndApply()
    new CryptoDes(cpg, threadPool).createAndApply()
    new CryptoTlsUnauthorized(cpg, threadPool).createAndApply()
    new CryptoWeak(cpg, threadPool).createAndApply()
    new CryptoWeakRandom(cpg, threadPool).createAndApply()
    new CryptoDeprecated(cpg, threadPool).createAndApply()
    new CheckDanglingLogout(cpg, threadPool).createAndApply()
    new CheckAngularIdor(cpg, threadPool).createAndApply()
    new CheckAngularXsrf(cpg, threadPool).createAndApply()
    new CheckObjectDefine(cpg, threadPool).createAndApply()
    new CheckCookieSecure(cpg, threadPool).createAndApply()
    new CheckInsecureFormSubmit(cpg, threadPool).createAndApply()
    new CheckReactXSS(cpg, threadPool).createAndApply()
    new CheckReactStoredXSS(cpg, threadPool).createAndApply()
    new CheckReactStrictMode(cpg, threadPool).createAndApply()
    new CheckKnexSqli(cpg, threadPool).createAndApply()
    new DbNoSqli(cpg, threadPool).createAndApply()
    new DbSqli(cpg, threadPool).createAndApply()
    new DosAttacks(cpg, threadPool).createAndApply()
    new DosTimingAttack(cpg, threadPool).createAndApply()
    new EvalDeser(cpg, threadPool).createAndApply()
    new EvalGrpc(cpg, threadPool).createAndApply()
    new EvalNode(cpg, threadPool).createAndApply()
    new EvalRequire(cpg, threadPool).createAndApply()
    new EvalSandbox(cpg, threadPool).createAndApply()
    new EvalSsti(cpg, threadPool).createAndApply()
    new EvalVm(cpg, threadPool).createAndApply()
    new EvalVm2(cpg, threadPool).createAndApply()
    new ExposedRoute(cpg, threadPool).createAndApply()
    new EvalYamlDeser(cpg, threadPool).createAndApply()
    new HeaderCookie(cpg, threadPool).createAndApply()
    new HeaderInjection(cpg, threadPool).createAndApply()
    new HeaderPoisoning(cpg, threadPool).createAndApply()
    new HeaderXssProtection(cpg, threadPool).createAndApply()
    new HeadersCors(cpg, threadPool).createAndApply()
    new HeadersHelment(cpg, threadPool).createAndApply()
    new HostHeaderInjection(cpg, threadPool).createAndApply()
    new JwtAlgorithmNone1(cpg, threadPool).createAndApply()
    new JwtAlgorithmNone2(cpg, threadPool).createAndApply()
    new JwtExposedCreds(cpg, threadPool).createAndApply()
    new LogInjection(cpg, threadPool).createAndApply()
    //new OpenRedirect(cpg, threadPool).createAndApply()
    new OsCommandInjection(cpg, threadPool).createAndApply()
    new OssElectron(cpg, threadPool).createAndApply()
    new OssExpressBp(cpg, threadPool).createAndApply()
    new PathTraversal(cpg, threadPool).createAndApply()
    new PathTraversalJoinResolve(cpg, threadPool).createAndApply()
    new PrototypePoorCheck(cpg, threadPool).createAndApply()
    new SensitiveEnv(cpg, threadPool).createAndApply()
    new XmlEntityExpansion(cpg, threadPool).createAndApply()
    new XpathInjection(cpg, threadPool).createAndApply()
    new Xxe(cpg, threadPool).createAndApply()
    new XxeSax(cpg).createAndApply()
    new XxeXml2Json(cpg, threadPool).createAndApply()
    println("[+] jsrules finished successfully")
  } finally {
    threadPool.shutdown()
  }
}
