import io.shiftleft.securityprofile.passes.languagespecific.javascript.generic._
import java.util.concurrent._

@main def main(): Unit = {
  val threadPool = Executors.newFixedThreadPool(1);
  try {
    new CryptoAesWithEcb(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new CryptoDes(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new CryptoTlsUnauthorized(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new CryptoWeak(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new CryptoWeakRandom(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new CryptoDeprecated(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new CheckDanglingLogout(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new CheckAngularIdor(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new CheckAngularXsrf(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new CheckObjectDefine(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new CheckCookieSecure(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new CheckInsecureFormSubmit(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new CheckReactXSS(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new CheckReactStoredXSS(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new CheckReactStrictMode(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new CheckKnexSqli(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new DbNoSqli(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new DbSqli(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new DosAttacks(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new DosTimingAttack(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new EvalDeser(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new EvalGrpc(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new EvalNode(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new EvalRequire(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new EvalSandbox(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new EvalSsti(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new EvalVm(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new EvalVm2(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new ExposedRoute(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new EvalYamlDeser(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new HeaderCookie(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new HeaderInjection(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new HeaderPoisoning(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new HeaderXssProtection(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new HeadersCors(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new HeadersHelment(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new HostHeaderInjection(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new JwtAlgorithmNone1(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new JwtAlgorithmNone2(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new JwtExposedCreds(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new LogInjection(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    //new OpenRedirect(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new OsCommandInjection(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new OssElectron(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new OssExpressBp(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new PathTraversal(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new PathTraversalJoinResolve(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new PrototypePoorCheck(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new SensitiveEnv(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new XmlEntityExpansion(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new XpathInjection(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new Xxe(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
    new XxeSax(cpg).createApplySerializeAndStore(serializedCpg)
    new XxeXml2Json(cpg, threadPool).createApplySerializeAndStore(serializedCpg)
  } finally {
    threadPool.shutdown()
  }
}
